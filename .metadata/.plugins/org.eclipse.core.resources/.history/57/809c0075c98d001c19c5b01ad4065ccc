package PokerDados;

import java.util.Arrays;
import java.util.Iterator;

public class Jugador {

	
	//PROPIEDADES	
	private boolean haGanado;
	private String nombre;
	private int tirada[];

	
	//CONTRCUTOR
	public Jugador(String nombre) {
		super();
		this.haGanado = haGanado;
		this.nombre = nombre;
		this.tirada = new int[5];
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Jugador [haGanado=");
		builder.append(haGanado);
		builder.append(", nombre=");
		builder.append(nombre);
		builder.append(", tirada=");
		builder.append(Arrays.toString(tirada));
		builder.append("");
		return builder.toString();
	}

	public boolean isHaGanado() {
		return haGanado;
	}
	public void setHaGanado(boolean haGanado) {
		this.haGanado = haGanado;
	}
	public String getNombre() {
		return nombre;
	}
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	public int[] getTirada() {
		return tirada;
	}
	public void setTirada(int[] tirada) {
		this.tirada = tirada;
	}


	public void tirada(){
		
		this.tirada=new int[5] ;
		
		for(int i=0; i<tirada.length; i++) {
			tirada[i]=(int) (Math.random()*6)+1;
		}
		Arrays.sort(tirada);
	}


	public int[] valorTirada() {
		
		int [] valorTiradaJugador = new int[1];
		
		int valor1 = 0;
		int valor2 = 0;
		
		if (pokerReal(tirada)) {
			valor1=8;
		} else if (poker(tirada)) {
			valor1=7;
		} else if (escaleraMayor(tirada)) {
			valor1=5;
		} else if (escaleraMenor(tirada)) {
			valor1=4;
		} else if (full(tirada)) {
			valor1=6;
		} else if (piernas(tirada)) {
			valor1=3;
		} else if (paresDobles(tirada)) {
			valor1=2;
		} else if (pares(tirada)) {
			valor1=1;
		}
		
		valorTiradaJugador[0]=valor1;
		valorTiradaJugador[1]=valor2;
		
		System.out.println(valorTiradaJugador[0]);
		
		return valorTiradaJugador;
		
	}
	

	public static boolean pokerReal(int[] tirada) {
		if ( (tirada[0] == tirada[1]) && (tirada[0] == tirada[2]) && (tirada[0] == tirada[3]) 
				&& (tirada[0] == tirada[4]) )
			return true;
		else
			return false;
	}
	
	public static boolean poker(int[] tirada) {
		if ( ( (tirada[0] == tirada[1]) && (tirada[0] == tirada[2]) && (tirada[0] == tirada[3]) ) ||
		     ( (tirada[1] == tirada[2]) && (tirada[1] == tirada[3]) && (tirada[1] == tirada[4]) ) )
			return true;
		else
			return false;
	}
	
	public static boolean escaleraMayor(int[] tirada) {
		if (tirada[0] == 2 && tirada[1] == 3 && tirada[2] == 4 && tirada[3] == 5 && tirada[4] == 6) 
			return true;
		else
			return false;
	}
	
	public static boolean escaleraMenor(int[] tirada) {
		if (tirada[0] == 1 && tirada[1] == 2 && tirada[2] == 3 && tirada[3] == 4 && tirada[4] == 5)
			return true;
		else
			return false;
	}
	
	public static boolean piernas(int[] tirada) {
		//x,x,x,y,z  x,y,y,y,z  x,y,z,z,z
		
		if (tirada[0] == tirada[1] && tirada[1] == tirada[2]) 
			return true;
		if (tirada[1] == tirada[2] && tirada[2] == tirada[3]) 
			return true;
		if (tirada[2] == tirada[3] && tirada[3] == tirada[4]) 
			return true;
		
		return false;
	}
	
	public static boolean full(int[] tirada) {
		//x,x,x,y,y   y,y,z,z,z
		
		if (tirada[0] == tirada[1] && tirada[1] == tirada[2] && tirada[3] == tirada[4]) 
			return true;
		if (tirada[2] == tirada[3] && tirada[3] == tirada[4] && tirada[0] == tirada[1]) 
			return true;
			
		return false;
	}
	
	public static boolean paresDobles(int[] tirada) {
		//x,x,y,y,z  x,y,y,z,z  x,x,y,z,z
		
		if (tirada[0] == tirada[1] && tirada[2] == tirada[3]) 
			return true;
		if (tirada[1] == tirada[2] && tirada[3] == tirada[4]) 
			return true;
		if (tirada[0] == tirada[1] && tirada[3] == tirada[4]) 
			return true;
		
		return false;
	}
	
	public static boolean pares(int[] tirada) {
		//x,x,y,z,k  x,y,y,z,k  x,y,z,z,k  x,y,z,k,k
		//No hay que ver los distintos, habría entrado en los if-else anteriores
		
		if (tirada[0] == tirada[1] || tirada[1] == tirada[2] || tirada[2] == tirada[3] || tirada[3] == tirada[4]) 
			return true;
		
		return false;
	}
	
}
